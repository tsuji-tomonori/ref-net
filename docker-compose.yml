version: '3.8'

services:
  # PostgreSQL データベース
  postgres:
    image: postgres:16-alpine
    container_name: refnet-postgres
    environment:
      POSTGRES_DB: refnet
      POSTGRES_USER: refnet
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-refnet_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U refnet -d refnet"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - refnet

  # Redis キャッシュ・メッセージブローカー
  redis:
    image: redis:7-alpine
    container_name: refnet-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - refnet

  # API Gateway (Nginx)
  nginx:
    image: nginx:alpine
    container_name: refnet-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - refnet

  # API サービス
  api:
    build:
      context: ./package/api
      dockerfile: Dockerfile
    container_name: refnet-api
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE__HOST: postgres
      DATABASE__PASSWORD: ${DATABASE_PASSWORD:-refnet_password}
      REDIS__HOST: redis
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      SEMANTIC_SCHOLAR_API_KEY: ${SEMANTIC_SCHOLAR_API_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./output:/app/output
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - refnet

  # クローラーワーカー
  crawler-worker:
    build:
      context: ./package/crawler
      dockerfile: Dockerfile
    container_name: refnet-crawler
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE__HOST: postgres
      DATABASE__PASSWORD: ${DATABASE_PASSWORD:-refnet_password}
      REDIS__HOST: redis
      SEMANTIC_SCHOLAR_API_KEY: ${SEMANTIC_SCHOLAR_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - refnet

  # 要約ワーカー
  summarizer-worker:
    build:
      context: ./package/summarizer
      dockerfile: Dockerfile
    container_name: refnet-summarizer
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE__HOST: postgres
      DATABASE__PASSWORD: ${DATABASE_PASSWORD:-refnet_password}
      REDIS__HOST: redis
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 1
    networks:
      - refnet

  # ジェネレーターワーカー
  generator-worker:
    build:
      context: ./package/generator
      dockerfile: Dockerfile
    container_name: refnet-generator
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE__HOST: postgres
      DATABASE__PASSWORD: ${DATABASE_PASSWORD:-refnet_password}
      REDIS__HOST: redis
      OUTPUT_DIR: /app/output
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./output:/app/output
    networks:
      - refnet

  # Celery Beat スケジューラー
  celery-beat:
    build:
      context: ./package/shared
      dockerfile: Dockerfile.beat
    container_name: refnet-celery-beat
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE__HOST: postgres
      DATABASE__PASSWORD: ${DATABASE_PASSWORD:-refnet_password}
      REDIS__HOST: redis
      CELERY_BROKER_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - celery_beat_data:/app/celerybeat
    healthcheck:
      test: ["CMD-SHELL", "celery -A refnet_shared.celery_app inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M
    networks:
      - refnet

  # 監視用 Flower (Celeryモニタリング)
  celery-flower:
    build:
      context: ./package/shared
      dockerfile: Dockerfile.flower
    container_name: refnet-celery-flower
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      FLOWER_USER: ${FLOWER_USER:-admin}
      FLOWER_PASSWORD: ${FLOWER_PASSWORD:-secure_password}
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-beat
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M
    networks:
      - refnet

volumes:
  postgres_data:
  redis_data:
  celery_beat_data:

networks:
  refnet:
    driver: bridge
