#!/usr/bin/env python3
"""脆弱性スキャン結果レポート生成."""

import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List


class VulnerabilityReporter:
    """脆弱性レポート生成クラス."""

    def __init__(self):
        """初期化."""
        self.reports_dir = Path("reports")
        self.reports_dir.mkdir(exist_ok=True)

        self.severity_priority = {
            "critical": 4,
            "high": 3,
            "medium": 2,
            "low": 1
        }

    def parse_safety_report(self, filepath: Path) -> Dict:
        """Safetyスキャン結果の解析."""
        if not filepath.exists():
            return {"vulnerabilities": [], "package": filepath.stem.replace("safety-", "")}

        try:
            with open(filepath) as f:
                data = json.load(f)

            vulnerabilities = []
            for vuln in data.get("vulnerabilities", []):
                vulnerabilities.append({
                    "type": "dependency",
                    "package": vuln.get("package"),
                    "version": vuln.get("version"),
                    "severity": vuln.get("severity", "medium").lower(),
                    "description": vuln.get("advisory"),
                    "cve": vuln.get("cve"),
                    "fix_version": vuln.get("fix_versions", [])
                })

            return {
                "vulnerabilities": vulnerabilities,
                "package": filepath.stem.replace("safety-", "")
            }
        except Exception as e:
            print(f"Failed to parse Safety report {filepath}: {e}")
            return {"vulnerabilities": [], "package": filepath.stem.replace("safety-", "")}

    def parse_bandit_report(self, filepath: Path) -> Dict:
        """Banditスキャン結果の解析."""
        if not filepath.exists():
            return {"vulnerabilities": [], "package": filepath.stem.replace("bandit-", "")}

        try:
            with open(filepath) as f:
                data = json.load(f)

            vulnerabilities = []
            for result in data.get("results", []):
                vulnerabilities.append({
                    "type": "code",
                    "file": result.get("filename"),
                    "line": result.get("line_number"),
                    "severity": result.get("issue_severity", "medium").lower(),
                    "description": result.get("issue_text"),
                    "test_id": result.get("test_id"),
                    "confidence": result.get("issue_confidence")
                })

            return {
                "vulnerabilities": vulnerabilities,
                "package": filepath.stem.replace("bandit-", "")
            }
        except Exception as e:
            print(f"Failed to parse Bandit report {filepath}: {e}")
            return {"vulnerabilities": [], "package": filepath.stem.replace("bandit-", "")}

    def generate_summary_report(self, all_results: List[Dict]) -> str:
        """サマリーレポート生成."""
        total_vulns = sum(len(result["vulnerabilities"]) for result in all_results)

        severity_counts = {"critical": 0, "high": 0, "medium": 0, "low": 0}

        for result in all_results:
            for vuln in result["vulnerabilities"]:
                severity = vuln.get("severity", "low")
                if severity in severity_counts:
                    severity_counts[severity] += 1

        # 緊急度判定
        urgency = "🟢 LOW"
        if severity_counts["critical"] > 0:
            urgency = "🔴 CRITICAL"
        elif severity_counts["high"] > 0:
            urgency = "🟠 HIGH"
        elif severity_counts["medium"] > 5:
            urgency = "🟡 MEDIUM"

        report = f"""# 脆弱性スキャン結果サマリー

**実行日時**: {datetime.now().isoformat()}
**緊急度**: {urgency}
**総脆弱性数**: {total_vulns}

## 深刻度別集計
- 🔴 Critical: {severity_counts['critical']}
- 🟠 High: {severity_counts['high']}
- 🟡 Medium: {severity_counts['medium']}
- 🟢 Low: {severity_counts['low']}

## パッケージ別詳細
"""

        for result in all_results:
            package = result["package"]
            vulns = result["vulnerabilities"]
            report += f"\n### {package}\n"

            if not vulns:
                report += "✅ 脆弱性は検出されませんでした。\n"
                continue

            # 深刻度順にソート
            vulns_sorted = sorted(vulns,
                                key=lambda x: self.severity_priority.get(x.get("severity", "low"), 0),
                                reverse=True)

            for vuln in vulns_sorted[:5]:  # 上位5件のみ表示
                severity_icon = {"critical": "🔴", "high": "🟠", "medium": "🟡", "low": "🟢"}.get(vuln.get("severity", "low"), "🟢")
                report += f"- {severity_icon} **{vuln.get('package', vuln.get('file', 'Unknown'))}**: {vuln.get('description', 'No description')[:100]}...\n"

            if len(vulns) > 5:
                report += f"- ... その他 {len(vulns) - 5} 件\n"

        report += f"""
## 推奨アクション
"""

        if severity_counts["critical"] > 0:
            report += "⚠️ **即座対応**: Critical脆弱性が検出されています。緊急パッチ適用が必要です。\n"

        if severity_counts["high"] > 0:
            report += "⚠️ **48時間以内**: High脆弱性への対応が必要です。\n"

        if severity_counts["medium"] > 5:
            report += "📋 **1週間以内**: Medium脆弱性が多数検出されています。優先順位を付けて対応してください。\n"

        if total_vulns == 0:
            report += "✅ 脆弱性は検出されませんでした。現在のセキュリティ状態は良好です。\n"

        return report

    def generate_detailed_report(self, all_results: List[Dict]) -> str:
        """詳細レポート生成."""
        report = f"""# 脆弱性詳細レポート
実行日時: {datetime.now().isoformat()}

"""

        for result in all_results:
            package = result["package"]
            vulns = result["vulnerabilities"]

            report += f"## パッケージ: {package}\n\n"

            if not vulns:
                report += "脆弱性は検出されませんでした。\n\n"
                continue

            for i, vuln in enumerate(vulns, 1):
                report += f"### 脆弱性 #{i}\n"
                report += f"- **タイプ**: {vuln.get('type', 'unknown')}\n"
                report += f"- **深刻度**: {vuln.get('severity', 'unknown')}\n"

                if vuln.get("package"):
                    report += f"- **パッケージ**: {vuln['package']} {vuln.get('version', '')}\n"
                if vuln.get("file"):
                    report += f"- **ファイル**: {vuln['file']}:{vuln.get('line', '')}\n"
                if vuln.get("cve"):
                    report += f"- **CVE**: {vuln['cve']}\n"

                report += f"- **説明**: {vuln.get('description', 'No description')}\n"

                if vuln.get("fix_version"):
                    report += f"- **修正バージョン**: {', '.join(vuln['fix_version'])}\n"

                report += "\n"

        return report

    def run(self):
        """レポート生成実行."""
        print("Starting vulnerability report generation")

        packages = ["shared", "api", "crawler", "summarizer", "generator"]
        all_results = []

        # Safetyレポート解析
        for package in packages:
            safety_file = self.reports_dir / f"safety-{package}.json"
            result = self.parse_safety_report(safety_file)
            if result["vulnerabilities"]:
                all_results.append(result)

        # Banditレポート解析
        for package in packages:
            bandit_file = self.reports_dir / f"bandit-{package}.json"
            result = self.parse_bandit_report(bandit_file)
            if result["vulnerabilities"]:
                all_results.append(result)

        # レポート生成
        summary = self.generate_summary_report(all_results)
        detailed = self.generate_detailed_report(all_results)

        # ファイル出力
        with open(self.reports_dir / "vulnerability_summary.md", "w") as f:
            f.write(summary)

        with open(self.reports_dir / "vulnerability_detailed.md", "w") as f:
            f.write(detailed)

        # JSON出力
        json_report = {
            "timestamp": datetime.now().isoformat(),
            "total_vulnerabilities": sum(len(result["vulnerabilities"]) for result in all_results),
            "results": all_results
        }

        with open(self.reports_dir / "vulnerability_report.json", "w") as f:
            json.dump(json_report, f, indent=2)

        print("Vulnerability report generation completed")
        print(summary)


def main():
    """メイン処理."""
    reporter = VulnerabilityReporter()
    reporter.run()


if __name__ == "__main__":
    main()
