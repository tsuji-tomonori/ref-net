input {
  beats {
    port => 5044
  }

  tcp {
    port => 5000
    codec => json
  }

  # Docker container logs
  tcp {
    port => 5001
    codec => json
    type => "docker"
  }

  # Application logs
  tcp {
    port => 5002
    codec => json
    type => "application"
  }

  # Security logs
  tcp {
    port => 5003
    codec => json
    type => "security"
  }

  # Nginx access logs
  tcp {
    port => 5004
    codec => json
    type => "nginx"
  }
}

filter {
  # Service identification
  if [fields][service] {
    mutate {
      add_field => { "service" => "%{[fields][service]}" }
    }
  }

  # Container name extraction
  if [container] {
    mutate {
      add_field => { "service" => "%{[container]}" }
    }
  }

  # Docker log processing
  if [type] == "docker" {
    # Extract container information
    grok {
      match => { "container_name" => "refnet-(?<service_name>[^-]+)" }
    }
    mutate {
      add_field => { "service" => "%{service_name}" }
    }
  }

  # 構造化ログの解析
  if [message] =~ /^{/ {
    json {
      source => "message"
      target => "parsed"
    }

    # Move parsed fields to root level
    ruby {
      code => "
        parsed = event.get('parsed')
        if parsed
          parsed.each do |key, value|
            event.set(key, value) unless event.get(key)
          end
        end
      "
    }
  }

  # Python log format parsing
  if [service] in ["refnet-api", "refnet-crawler", "refnet-summarizer", "refnet-generator"] {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:level}\s+%{DATA:logger}\s+%{GREEDYDATA:log_message}" }
    }
  }

  # Celery log parsing
  if [service] == "celery" {
    grok {
      match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\:%{LOGLEVEL:level}/%{DATA:process}\]\s+%{GREEDYDATA:log_message}" }
    }
    mutate {
      add_tag => [ "celery" ]
    }
  }

  # Nginx log parsing
  if [type] == "nginx" {
    grok {
      match => { "message" => "%{NGINXACCESS}" }
    }
    mutate {
      add_tag => [ "nginx", "web" ]
    }
  }

  # Security log processing
  if [type] == "security" {
    mutate {
      add_tag => [ "security" ]
    }

    # Detect potential security issues
    if [message] =~ /(?i)(unauthorized|forbidden|failed|attack|suspicious|malicious|intrusion)/ {
      mutate {
        add_tag => [ "security_alert" ]
      }
    }
  }

  # Database log processing
  if [service] == "postgres" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{WORD:timezone}\s+\[%{DATA:process}\]\s+%{LOGLEVEL:level}:\s+%{GREEDYDATA:log_message}" }
    }
    mutate {
      add_tag => [ "database" ]
    }
  }

  # Redis log processing
  if [service] == "redis" {
    grok {
      match => { "message" => "%{POSINT:pid}:%{CHAR:role}\s+%{TIMESTAMP_ISO8601:timestamp}\s+%{CHAR:level}\s+%{GREEDYDATA:log_message}" }
    }
    mutate {
      add_tag => [ "cache" ]
    }
  }

  # タイムスタンプの正規化
  date {
    match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss", "dd/MMM/yyyy:HH:mm:ss Z" ]
    target => "@timestamp"
  }

  # ログレベルの正規化
  if [level] {
    mutate {
      uppercase => [ "level" ]
    }
  }

  # エラーログの特別処理
  if [level] == "ERROR" {
    mutate {
      add_tag => [ "error" ]
    }
  }

  # 警告ログの処理
  if [level] == "WARNING" or [level] == "WARN" {
    mutate {
      add_tag => [ "warning" ]
    }
  }

  # クリティカルログの処理
  if [level] == "CRITICAL" or [level] == "FATAL" {
    mutate {
      add_tag => [ "critical" ]
    }
  }

  # Performance monitoring
  if [message] =~ /response_time|duration|elapsed/ {
    mutate {
      add_tag => [ "performance" ]
    }
  }

  # HTTP status code processing
  if [http_status] {
    if [http_status] >= 400 and [http_status] < 500 {
      mutate {
        add_tag => [ "client_error" ]
      }
    }
    if [http_status] >= 500 {
      mutate {
        add_tag => [ "server_error" ]
      }
    }
  }

  # Add metadata
  mutate {
    add_field => { "[@metadata][index_suffix]" => "%{+YYYY.MM.dd}" }
  }

  # Environment detection
  if [environment] {
    mutate {
      add_field => { "env" => "%{environment}" }
    }
  } else {
    mutate {
      add_field => { "env" => "unknown" }
    }
  }

  # Cleanup
  mutate {
    remove_field => [ "parsed", "host", "port", "fields" ]
  }
}

output {
  # Main logs
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "refnet-logs-%{[@metadata][index_suffix]}"
    template_name => "refnet-logs"
    template_pattern => "refnet-logs-*"
    template => "/usr/share/logstash/templates/refnet-logs.json"
    template_overwrite => true
  }

  # Security logs separate index
  if "security" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "refnet-security-%{[@metadata][index_suffix]}"
    }
  }

  # Error logs separate index
  if "error" in [tags] or "critical" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "refnet-errors-%{[@metadata][index_suffix]}"
    }
  }

  # Performance logs separate index
  if "performance" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "refnet-performance-%{[@metadata][index_suffix]}"
    }
  }

  # デバッグ用（開発環境のみ）
  if [@metadata][debug] {
    stdout {
      codec => rubydebug
    }
  }
}
